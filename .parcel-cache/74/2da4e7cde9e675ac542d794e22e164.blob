{"mappings":"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","sources":["./src/Components/TiComponent.ts","./src/Components/TiCube.ts","./src/Components/TiPolygon.ts","./src/ti-3d-shapes.js"],"sourcesContent":["/**\r\n * Component to create the shape\r\n */\r\nexport default class TiComponent extends HTMLElement {\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/**\r\n\t * To check if an element does exist\r\n\t */\r\n\tisExist(val: string | number): boolean {\r\n\t\tif (val === null || typeof val === \"undefined\") {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * To check if an element is a valid number\r\n\t */\r\n\tisValidNum(val: number): boolean {\r\n\t\tif (isNaN(val as number) === true) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse if (isFinite(val as number) === false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Convert the object into CSS string\r\n\t */\r\n\tobjToCSS(styleObj: Record<string, Record<string, string>>): string {\r\n\t\tlet cssArray: Array<string> = [];\r\n\t\t\r\n\t\tfor (const selector in styleObj) {\r\n\t\t\tcssArray.push(selector);\r\n\t\t\tcssArray.push(\"{\");\r\n\t\t\t\r\n\t\t\tfor (const attr in styleObj[selector]) {\r\n\t\t\t\tcssArray.push(attr);\r\n\t\t\t\tcssArray.push(\":\");\r\n\t\t\t\tcssArray.push(styleObj[selector][attr]);\r\n\t\t\t\tcssArray.push(\";\");\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\tcssArray.push(\"}\");\r\n\t\t}\r\n\t\t\r\n\t\treturn cssArray.join(\"\");\r\n\t}\r\n\r\n\t/**\r\n\t * Trigonometric SIN function\r\n\t */\r\n\tsin(angle: number): number {\r\n    return Math.sin((angle * Math.PI) / 180);\r\n  }\r\n\t\r\n\t/**\r\n\t * Trigonometric COS function\r\n\t */\r\n  cos(angle: number): number {\r\n    return Math.cos((angle * Math.PI) / 180);\r\n  }\r\n\t\r\n\t/**\r\n\t * Get the distance by trigonometric SIN function\r\n\t */\r\n  getDistanceBySin(angle: number, size: number): number {\r\n    return (this.sin(angle - 90) * size) + size;\r\n  }\r\n\t\r\n\t/**\r\n\t * Get the distance by trigonometric COS function\r\n\t */\r\n  getDistanceByCos(angle: number, size: number): number {\r\n    return (this.cos(angle - 90) * size) + size;\r\n  }\r\n}\r\n","import TiComponent from \"./TiComponent\";\r\n\r\n/**\r\n * Cube component class\r\n */\r\nexport default class TiCube extends TiComponent {\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\t\r\n\t\tconst width: number = parseInt(this.getAttribute(\"width\"));\r\n\t\tconst height: number = parseInt(this.getAttribute(\"height\"));\r\n\t\tconst depth: number = parseInt(this.getAttribute(\"depth\"));\r\n\t\tconst unit: string = this.getAttribute(\"unit\");\r\n\t\tconst color: string = this.getAttribute(\"color\");\r\n\t\t\r\n\t\tthis.build(width, height, depth, unit, color);\r\n\t}\r\n\r\n\t/**\r\n\t * Check the attributes if valid\r\n\t */\r\n\tcheckAttr(width: number, height: number, depth: number, unit: string, color: string): void {\r\n\t\tif (this.isExist(width) === false) {\r\n\t\t\tthrow \"Must set the 'width' attribute.\";\r\n\t\t}\r\n\t\telse if (this.isExist(height) === false) {\r\n\t\t\tthrow \"Must set the 'height' attribute.\";\r\n\t\t}\r\n\t\telse if (this.isExist(depth) === false) {\r\n\t\t\tthrow \"Must set the 'depth' attribute.\";\r\n\t\t}\r\n\t\telse if (this.isExist(unit) === false) {\r\n\t\t\tthrow \"Must set the 'unit' attribute.\";\r\n\t\t}\r\n\t\telse if (this.isValidNum(width) === false) {\r\n\t\t\tthrow \"The value of 'width' attribute must be numeric.\";\r\n\t\t}\r\n\t\telse if (this.isValidNum(height) === false) {\r\n\t\t\tthrow \"The value of 'height' attribute must be numeric.\";\r\n\t\t}\r\n\t\telse if (this.isValidNum(depth) === false) {\r\n\t\t\tthrow \"The value of 'depth' attribute must be numeric.\";\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create the style of the box\r\n\t */\r\n\tsetStyle(width: number, height: number, depth: number, unit: string, color: string): string {\r\n\t\tconst styleObj: Record<string, Record<string, string>> = {\r\n\t\t\t\".ti-box\": {\r\n\t\t\t\t\"width\": `${width}${unit}`,\r\n\t\t\t\t\"height\": `${height}${unit}`,\r\n\t\t\t\t\"position\": \"relative\"\r\n\t\t\t},\r\n\t\t\t\".ti-box > div\": {\r\n\t\t\t\t\"background-color\": color,\r\n\t\t\t\t\"width\": \"100%\",\r\n\t\t\t\t\"height\": \"100%\",\r\n\t\t\t\t\"position\": \"absolute\",\r\n\t\t\t\t\"top\": \"0px\",\r\n\t\t\t\t\"left\": \"0px\"\r\n\t\t\t},\r\n\t\t\t\".ti-box-top\": {\r\n\t\t\t\t\"transform\": [\r\n\t\t\t\t\t`translateZ(calc(${depth}${unit} / 2))`,\r\n\t\t\t\t\t\"rotateX(90deg)\",\r\n\t\t\t\t\t`translateZ(calc(${depth}${unit} / 2))`\r\n\t\t\t\t].join(\" \"),\r\n\t\t\t\t\"filter\": \"brightness(110%)\",\r\n\t\t\t},\r\n\t\t\t\".ti-box-bottom\": {\r\n\t\t\t\t\"transform\": [\r\n\t\t\t\t\t`translateZ(calc(${depth}${unit} / 2))`,\r\n\t\t\t\t\t\"rotateX(-90deg)\",\r\n\t\t\t\t\t`translateZ(calc(${depth}${unit} / 2))`\r\n\t\t\t\t].join(\" \"),\r\n\t\t\t\t\"filter\": \"brightness(80%)\",\r\n\t\t\t},\r\n\t\t\t\".ti-box-left\": {\r\n\t\t\t\t\"transform\": [\r\n\t\t\t\t\t`translateZ(calc(${depth}${unit} / 2))`,\r\n\t\t\t\t\t\"rotateY(-90deg)\",\r\n\t\t\t\t\t`translateZ(calc(${depth}${unit} / 2))`\r\n\t\t\t\t].join(\" \")\r\n\t\t\t},\r\n\t\t\t\".ti-box-right\": {\r\n\t\t\t\t\"transform\": [\r\n\t\t\t\t\t`translateZ(calc(${depth}${unit} / 2))`,\r\n\t\t\t\t\t\"rotateY(90deg)\",\r\n\t\t\t\t\t`translateZ(calc(${depth}${unit} / 2))`\r\n\t\t\t\t].join(\" \"),\r\n\t\t\t\t\"filter\": \"brightness(90%)\",\r\n\t\t\t},\r\n\t\t\t\".ti-box-front\": {\r\n\t\t\t\t\"transform\": `translateZ(${depth}${unit})`\r\n\t\t\t},\r\n\t\t\t\".ti-box-rear\": {\r\n\t\t\t\t\"transform\": \"rotateY(180deg)\",\r\n\t\t\t\t\"filter\": \"brightness(90%)\",\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\treturn this.objToCSS(styleObj);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Build the component by adding elements inside\r\n\t */\r\n\tbuild(width: number, height: number, depth: number, unit: string, color: string) {\r\n\t\tthis.checkAttr(width, height, depth, unit, color);\r\n\r\n\t\tif (this.isExist(color) === false) {\r\n\t\t\tcolor = \"#ffffff\";\r\n\t\t}\r\n\t\t\r\n\t\tthis.attachShadow({ mode: \"open\" });\r\n\t\t\r\n\t\t//----- Box element\r\n\t\tconst box: HTMLElement = document.createElement(\"div\");\r\n\t\tconst top: HTMLElement = document.createElement(\"div\");\r\n\t\tconst bottom: HTMLElement = document.createElement(\"div\");\r\n\t\tconst left: HTMLElement = document.createElement(\"div\");\r\n\t\tconst right: HTMLElement = document.createElement(\"div\");\r\n\t\tconst front: HTMLElement = document.createElement(\"div\");\r\n\t\tconst rear: HTMLElement = document.createElement(\"div\");\r\n\t\t\r\n\t\tbox.classList.add(\"ti-box\");\r\n\t\ttop.classList.add(\"ti-box-top\");\r\n\t\tbottom.classList.add(\"ti-box-bottom\");\r\n\t\tleft.classList.add(\"ti-box-left\");\r\n\t\tright.classList.add(\"ti-box-right\");\r\n\t\tfront.classList.add(\"ti-box-front\");\r\n\t\trear.classList.add(\"ti-box-rear\");\r\n\t\t\r\n\t\tbox.append(top, bottom, left, right, front, rear);\r\n\t\t\r\n\t\t//----- Styling\r\n\t\tconst style: HTMLStyleElement = document.createElement(\"style\");\r\n\t\t\r\n\t\tstyle.textContent = this.setStyle(width, height, depth, unit, color);\r\n\t\t\r\n\t\tthis.shadowRoot.append(style, box);\r\n\t}\r\n}\r\n","import TiComponent from \"./TiComponent\";\r\n\r\n/**\r\n * Polygon component class\r\n */\r\nexport default class TiPolygon extends TiComponent {\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\t\r\n\t\tconst size: number = parseInt(this.getAttribute(\"size\"));\r\n\t\tconst depth: number = parseInt(this.getAttribute(\"depth\"));\r\n\t\tconst unit: string = this.getAttribute(\"unit\");\r\n\t\tconst sides: number = parseInt(this.getAttribute(\"sides\"));\r\n\t\tconst color: string = this.getAttribute(\"color\");\r\n\t\t\r\n\t\tthis.build(size, depth, unit, sides, color);\r\n\t}\r\n\r\n\t/**\r\n\t * Check the attributes if valid\r\n\t */\r\n\tcheckAttr(size: number, depth: number, unit: string, sides: number): void {\r\n\t\tif (this.isExist(size) === false) {\r\n\t\t\tthrow \"Must set the 'size' attribute.\";\r\n\t\t}\r\n\t\telse if (this.isExist(depth) === false) {\r\n\t\t\tthrow \"Must set the 'depth' attribute.\";\r\n\t\t}\r\n\t\telse if (this.isExist(unit) === false) {\r\n\t\t\tthrow \"Must set the 'unit' attribute.\";\r\n\t\t}\r\n\t\telse if (this.isExist(sides) === false) {\r\n\t\t\tthrow \"Must set the 'sides' attribute.\";\r\n\t\t}\r\n\t\telse if (this.isValidNum(size) === false) {\r\n\t\t\tthrow \"The value of 'size' attribute must be numeric.\";\r\n\t\t}\r\n\t\telse if (this.isValidNum(depth) === false) {\r\n\t\t\tthrow \"The value of 'depth' attribute must be numeric.\";\r\n\t\t}\r\n\t\telse if (this.isValidNum(sides) === false) {\r\n\t\t\tthrow \"The value of 'sides' attribute must be numeric.\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n   * Create a SVN element of a polygon\r\n   */\r\n  createPolygon(angleCalc: number, size: number, sides: number): string {\r\n    const boxSize: number = size / 2;\r\n    const path: Array<string> = [];\r\n    \r\n    path.push(\"M\");\r\n    path.push(this.getDistanceByCos(0, boxSize).toString());\r\n    path.push(this.getDistanceBySin(0, boxSize).toString());\r\n    \r\n    for (let i = 0; i <= sides; i++) {\r\n      path.push(\"L\");\r\n      path.push(this.getDistanceByCos(angleCalc * i, boxSize).toString());\r\n      path.push(this.getDistanceBySin(angleCalc * i, boxSize).toString());\r\n    }\r\n    \r\n    path.push(\"Z\");\r\n    \r\n    return path.join(\" \");\r\n  }\r\n\r\n  /**\r\n   * Create the style of the box\r\n   */\r\n  setStyle(size: number, depth: number, unit: string, color: string, angleCalc: number): string {\r\n    const styleObj: Record<string, Record<string, string>> = {\r\n      \".ti-polygon\": {\r\n        \"width\": `${size}${unit}`,\r\n        \"height\": `${size}${unit}`,\r\n        \"position\": \"relative\",\r\n        \"transform-style\": \"preserve-3d\"\r\n      },\r\n      \".ti-polygon-front, .ti-polygon-rear\": {\r\n        \"fill\": color,\r\n        \"width\": `${size}${unit}`,\r\n        \"height\": `${size}${unit}`,\r\n        \"position\": \"absolute\",\r\n        \"top\": \"0px\",\r\n        \"left\": \"0px\",\r\n        \"transform-style\": \"preserve-3d\"\r\n      },\r\n      \".ti-polygon-front\": {\r\n        \"transform\": `translateZ(${depth}${unit})`\r\n      },\r\n      \".ti-polygon-rear\": {\r\n        \"filter\": \"brightness(90%)\"\r\n      },\r\n      \".ti-polygon-side\": {\r\n        \"background-color\": \"var(--background-color)\",\r\n        \"width\": \"var(--width)\",\r\n        \"height\": `${depth}${unit}`,\r\n        \"position\": \"absolute\",\r\n        \"top\": \"50%\",\r\n        \"left\": \"50%\",\r\n        \"transform-origin\": \"bottom left\",\r\n        \"transform-style\": \"preserve-3d\",\r\n        \"transform\": [\r\n          \"translateY(-100%)\",\r\n          \"rotateZ(var(--angle))\",\r\n          `translateY(-${size / 2}${unit})`,\r\n          `rotateZ(${angleCalc / 2}deg)`,\r\n          \"rotateX(-90deg)\"\r\n        ].join(\" \"),\r\n        \"filter\": \"brightness(var(--brightness))\"\r\n      }\r\n    };\r\n    \r\n    return this.objToCSS(styleObj);\r\n  }\r\n  \r\n\t/**\r\n   * Build the component by adding elements inside\r\n   */\r\n  build(size: number, depth: number, unit: string, sides: number, color: string): void {\r\n    this.checkAttr(size, depth, unit, sides);\r\n    \r\n    this.attachShadow({ mode: \"open\" });\r\n    \r\n    // Name Space of SVG\r\n    const svgNS: string = \"http://www.w3.org/2000/svg\";\r\n    \r\n    const fullAngle: number = 360;\r\n    const angleCalc: number = fullAngle / sides;\r\n    const polygonPath: string = this.createPolygon(angleCalc, size, sides);\r\n    \r\n    //----- Box element\r\n    const polygon: HTMLDivElement = document.createElement(\"div\");\r\n    const front: SVGElement = document.createElementNS(svgNS, \"svg\") as SVGElement;\r\n    const rear: SVGElement = document.createElementNS(svgNS, \"svg\") as SVGElement;\r\n    const frontPath: SVGPathElement = document.createElementNS(svgNS, \"path\") as SVGPathElement;\r\n    const rearPath: SVGPathElement = document.createElementNS(svgNS, \"path\") as SVGPathElement;\r\n    \r\n    front.setAttributeNS(null, \"viewBox\", `0 0 ${size} ${size}`);\r\n    rear.setAttributeNS(null, \"viewBox\", `0 0 ${size} ${size}`);\r\n    \r\n    frontPath.setAttributeNS(null, \"d\", polygonPath);\r\n    rearPath.setAttributeNS(null, \"d\", polygonPath);\r\n    \r\n    front.append(frontPath);\r\n    rear.append(rearPath);\r\n    \r\n    polygon.classList.add(\"ti-polygon\");\r\n    front.classList.add(\"ti-polygon-front\");\r\n    rear.classList.add(\"ti-polygon-rear\");\r\n    \r\n    polygon.append(front, rear);\r\n    \r\n    const sideWidth: number = (size / 2) * this.sin(angleCalc / 2) * 2;\r\n    \r\n    for (let i: number = 0; i < sides; i++) {\r\n      const side: HTMLDivElement = document.createElement(\"div\");\r\n      \r\n      side.classList.add(\"ti-polygon-side\");\r\n      \r\n      const angle: number = angleCalc * i;\r\n      \r\n      let sideColor: string = `--background-color: ${color};`;\r\n      \r\n      if ((angle >= 45 && angle < 135) || (angle >= 135 && angle < 225)) {\r\n        // Right side or Bottom side\r\n        \r\n        sideColor += \" --brightness: 90%;\";\r\n      }\r\n      else {\r\n        // Left side or top side\r\n        \r\n        sideColor += \"--brightness: 100%;\";\r\n      }\r\n      \r\n      side.style.cssText =\r\n        `--width: ${sideWidth}${unit}; --angle: ${angle}deg; ${sideColor}`;\r\n      \r\n      polygon.append(side);\r\n    }\r\n               \r\n    //----- Styling\r\n    const style: HTMLStyleElement = document.createElement(\"style\");\r\n    \r\n    style.textContent = this.setStyle(size, depth, unit, color, angleCalc);\r\n    \r\n    this.shadowRoot.append(style, polygon);\r\n  }\r\n}\r\n","\"use strict\";\r\n\r\nimport TiCube from \"./Components/TiCube\";\r\nimport TiPolygon from \"./Components/TiPolygon\";\r\n\r\n// Define the custom element as a web component\r\ncustomElements.define(\"ti-cube\", TiCube);\r\ncustomElements.define(\"ti-polygon\", TiPolygon);\r\n"],"names":["TiComponent","HTMLElement","$a7b37a4de9a1c9f977fe558e28b$var$_classCallCheck","this","_super","call","val","isNaN","isFinite","styleObj","cssArray","selector","attr","push","join","angle","Math","sin","PI","cos","size","TiCube","_this","$ee9041ac8e1f35b57266cd5b198e591b$var$_classCallCheck","width","parseInt","getAttribute","height","depth","unit","color","build","isExist","isValidNum",".ti-box","concat","position",".ti-box > div","background-color","top","left",".ti-box-top","transform","filter",".ti-box-bottom",".ti-box-left",".ti-box-right",".ti-box-front",".ti-box-rear","objToCSS","checkAttr","attachShadow","mode","box","document","createElement","bottom","right","front","rear","classList","add","append","style","textContent","setStyle","shadowRoot","TiPolygon","$ba86e16ccb12d4dd126ebeb1f0742712$var$_classCallCheck","sides","angleCalc","boxSize","path","getDistanceByCos","toString","getDistanceBySin","i",".ti-polygon","transform-style",".ti-polygon-front, .ti-polygon-rear","fill",".ti-polygon-front",".ti-polygon-rear",".ti-polygon-side","transform-origin","svgNS","polygonPath","createPolygon","polygon","createElementNS","frontPath","rearPath","setAttributeNS","sideWidth","side","sideColor","cssText","customElements","define","$ee9041ac8e1f35b57266cd5b198e591b$export$default","$ba86e16ccb12d4dd126ebeb1f0742712$export$default"],"version":3,"file":"ti-3d-shapes.js.map"}